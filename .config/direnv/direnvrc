rawurlencode() {
	local string="${1}"
	local strlen=${#string}
	local encoded=""
	local pos c o

	for (( pos=0 ; pos<strlen ; pos++ )); do
		c=${string:$pos:1}
		case "$c" in
			[-_.~a-zA-Z0-9] ) o="${c}" ;;
			* )   printf -v o '%%%02x' "'$c"
		esac
		encoded+="${o}"
	done
	echo "${encoded}"
}

# usage: `layout postgres`
# on first run creates new postgres cluster
# you can run `postgres` to start it and `psql` to connect
layout_postgres() {
	export PGDATA="$(direnv_layout_dir)/postgres"
	export PGHOST="$PGDATA"
	export PGHOST_ESCAPED=$(rawurlencode $PGHOST)
	export DATABASE_URL="postgresql://$PGHOST_ESCAPED/$USER"

	if [[ ! -d "$PGDATA" ]]; then
		mkdir -p $PGDATA
		chmod 0750 $PGDATA
		LANG="C.UTF-8" LC_ALL="C.UTF-8" LC_CTYPE="C.UTF-8" initdb
		cat >> "$PGDATA/postgresql.conf" <<-EOF
			listen_addresses = ''
			unix_socket_directories = '$PGHOST'
			fsync = off
			synchronous_commit = off
			full_page_writes = off
		EOF
		echo "CREATE DATABASE $USER;" | postgres --single -E postgres
	fi
}

# usage: `layout redis`
# on first run creates new redis server directory
# you can run `redis-server $REDIS_CONFIG` to start it
layout_redis() {
	export REDIS_DATA="$(direnv_layout_dir)/redis"
	export REDIS_CONFIG="$REDIS_DATA/redis.conf"
	export REDIS_SOCKET="$REDIS_DATA/redis.sock"

	if [[ ! -d "$REDIS_DATA" ]]; then
		mkdir -p $REDIS_DATA
		chmod 0750 $REDIS_DATA
		cat >> "$REDIS_DATA/redis.conf" <<-EOF
			bind 127.0.0.1
			port 0
			unixsocket $REDIS_SOCKET
			unixsocketperm 700
			pidfile $REDIS_DATA/redis.pid
			loglevel notice
			logfile ""
			save 900 1
			save 300 10
			save 60 10000
			stop-writes-on-bgsave-error no
			rdbcompression yes
			dbfilename dump.rdb
			dir $REDIS_DATA/
		EOF
	fi
}

# vim: noexpandtab
