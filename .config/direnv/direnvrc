rawurlencode() {
	local string="${1}"
	local strlen=${#string}
	local encoded=""
	local pos c o

	for (( pos=0 ; pos<strlen ; pos++ )); do
		c=${string:$pos:1}
		case "$c" in
			[-_.~a-zA-Z0-9] ) o="${c}" ;;
			* )   printf -v o '%%%02x' "'$c"
		esac
		encoded+="${o}"
	done
	echo "${encoded}"
}

# usage: `layout postgres`
# on first run creates new postgres cluster
# you can run `postgres` to start it and `psql` to connect
layout_postgres() {
	export PGDATA="$(direnv_layout_dir)/postgres"
	export PGHOST="$PGDATA"
	export PGHOST_ESCAPED=$(rawurlencode $PGHOST)
	export DATABASE_URL="postgresql://$PGHOST_ESCAPED/$USER"

	if [[ ! -d "$PGDATA" ]]; then
		mkdir -p $PGDATA
		chmod 0750 $PGDATA
		LANG="en_US.UTF-8" LC_ALL="en_US.UTF-8" LC_CTYPE="en_US.UTF-8" initdb
		cat >> "$PGDATA/postgresql.conf" <<-EOF
			listen_addresses = ''
			unix_socket_directories = '$PGHOST'
			fsync = off
			synchronous_commit = off
			full_page_writes = off
		EOF
		echo "CREATE DATABASE $USER;" | postgres --single -E postgres
	fi
}

# usage: `layout redis`
# on first run creates new redis server directory
# you can run `redis-server $REDIS_CONFIG` to start it
layout_redis() {
	export REDIS_DATA="$(direnv_layout_dir)/redis"
	export REDIS_CONFIG="$REDIS_DATA/redis.conf"
	export REDIS_SOCKET="$REDIS_DATA/redis.sock"

	if [[ ! -d "$REDIS_DATA" ]]; then
		mkdir -p $REDIS_DATA
		chmod 0750 $REDIS_DATA
		cat >> "$REDIS_DATA/redis.conf" <<-EOF
			bind 127.0.0.1
			port 0
			unixsocket $REDIS_SOCKET
			unixsocketperm 700
			pidfile $REDIS_DATA/redis.pid
			loglevel notice
			logfile ""
			save 900 1
			save 300 10
			save 60 10000
			stop-writes-on-bgsave-error no
			rdbcompression yes
			dbfilename dump.rdb
			dir $REDIS_DATA/
		EOF
	fi
}

# usage: `layout codeartifact aws-region mydomain owner-id myrepo`
# on first run fetch aws codeartifact token and place it into .direnv/codeartifact_token
# if .direnv/codeartifact_token was modified more than 9 hours ago it
# updates it refetch token and updates the file
# also creates in-project .npmrc with current token
# and populate env with $CODEARTIFACT_TOKEN var
layout_codeartifact() {
	local tokenfile="$(direnv_layout_dir)/codeartifact_token"
	if [ ! -f $tokenfile ] || [[ $(find $tokenfile -mmin +540 -print) ]]; then
		local region=${1}
		local domain=${2}
		local owner=${3}
		local repo=${4}
		local token=$(aws codeartifact get-authorization-token --domain $domain --domain-owner $owner --region $region | jq -r .authorizationToken)
		echo $token > $tokenfile
		tee "$PWD/.npmrc" <<-EOF
		@${repo}:registry=https://${domain}.amazonaws.com/npm/${repo}/
		//${domain}.amazonaws.com/npm/${repo}/:always-auth=true
		//${domain}.amazonaws.com/npm/${repo}/:${token}
		EOF
	fi
	export CODEARTIFACT_TOKEN=$(cat $tokenfile)
}
# vim: noexpandtab ts=4
